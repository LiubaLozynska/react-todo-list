{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Body","props","onChange","event","setState","inputValue","target","value","getNewToDo","todo","todos","state","displayNewToDo","key","preventDefault","onInputFocus","onInputBlur","checkboxOnClick","currentTarget","parentElement","classList","contains","style","color","textDecoration","remove","checked","deleteCount","add","document","getElementsByClassName","length","visibility","buttonClick","border","borderRadius","className","i","display","buttonBlur","deleteToDo","deleteCompletedToDos","showAllToDos","this","onKeyPress","onFocus","onBlur","map","type","onClick","React","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICbAC,E,YACF,WAAaC,GAAQ,IAAD,8BAChB,4CAAOA,KAKXC,SAAW,SAAAC,GAAK,OAAI,EAAKC,SAAU,CAACC,WAAYF,EAAMG,OAAOC,SANzC,EAQpBC,WAAa,SAAAC,GAAI,OAAI,EAAKL,SAAU,CAAEM,MAAM,GAAD,mBAAM,EAAKC,MAAMD,OAAjB,CAAwBD,OAR/C,EASpBG,eAAiB,SAACT,GACI,UAAdA,EAAMU,MACNV,EAAMW,iBACN,EAAKN,WAAW,EAAKG,MAAMN,YAC3B,EAAKD,SAAU,CAACC,WAAW,OAbf,EAgBpBU,aAAe,WACX,EAAKX,SAAU,CAACC,WAAW,MAjBX,EAmBpBW,YAAc,WACV,EAAKZ,SAAU,CAACC,WAAW,4BApBX,EAuBpBY,gBAAkB,SAACd,GAEfA,EAAMW,iBAGDX,EAAMe,cAAcC,cAAcC,UAAUC,SAAS,YAQtDlB,EAAMe,cAAcI,MAAMC,MAAQ,QAClCpB,EAAMe,cAAcI,MAAME,eAAiB,OAC3CrB,EAAMe,cAAcC,cAAcC,UAAUK,OAAO,WACnDtB,EAAMe,cAAcE,UAAUK,OAAO,eACrC,EAAKrB,SAAS,CAACsB,QAAS,EAAKf,MAAMe,QAAQ,IAC3C,EAAKtB,SAAS,CAACuB,YAAa,EAAKhB,MAAMgB,YAAc,MAZrDxB,EAAMe,cAAcI,MAAMC,MAAQ,qBAClCpB,EAAMe,cAAcI,MAAME,eAAiB,eAC3CrB,EAAMe,cAAcC,cAAcC,UAAUQ,IAAI,WAChDzB,EAAMe,cAAcE,UAAUQ,IAAI,eAClC,EAAKxB,SAAS,CAACuB,YAAa,EAAKhB,MAAMgB,YAAc,KAWrDE,SAASC,uBAAuB,WAAWC,QAAU,IACrDF,SAASC,uBAAuB,mBAAmB,GAAGR,MAAMU,WAAW,YA7C3D,EAmDpBC,YAAc,SAAC9B,GAKX,GAJAA,EAAMW,iBACNX,EAAMe,cAAcI,MAAMY,OAAS,+BACnC/B,EAAMe,cAAcI,MAAMa,aAAe,MAEH,YAAlChC,EAAMe,cAAckB,UACpB,IAAK,IAAIC,EAAE,EAAGA,EAAER,SAASC,uBAAuB,WAAWC,OAAQM,IAC/DR,SAASC,uBAAuB,WAAWO,GAAGf,MAAMgB,QAAQ,YAG/D,GAAsC,gBAAlCnC,EAAMe,cAAckB,UACzB,IAAK,IAAIC,EAAE,EAAGA,EAAER,SAASC,uBAAuB,WAAWC,OAAQM,IAC/DR,SAASC,uBAAuB,WAAWO,GAAGf,MAAMgB,QAAQ,QA/DpD,EAsEpBC,WAAa,SAACpC,GACVA,EAAMW,iBACNX,EAAMe,cAAcI,MAAMY,OAAS,QAxEnB,EA2EpBM,WAAa,SAACrC,GACVA,EAAMW,iBACNX,EAAMe,cAAcC,cAAcM,SAC7BtB,EAAMe,cAAcC,cAAcC,UAAUC,SAAS,YACtD,EAAKjB,SAAS,CAACuB,YAAa,EAAKhB,MAAMgB,YAAc,KA/EzC,EAqFpBc,qBAAuB,SAACtC,GACpBA,EAAMW,iBAEN,KAAOe,SAASC,uBAAuB,WAAWC,OAAS,GACvDF,SAASC,uBAAuB,WAF9B,GAE4CL,UAvFlD,EAAKd,MAAQ,CAAEN,WAAY,yBAA0BK,MAAO,GAAIgC,cAAc,EAAMf,YAAa,GAFjF,E,sEA8FT,IAAD,OACN,OACG,kBAAC,WAAD,KAEI,wBAAIS,UAAU,gBAAd,SAEA,0BAAMA,UAAU,aAEZ,2BACAA,UAAU,iBACV7B,MAASoC,KAAKhC,MAAMN,WACpBH,SAAYyC,KAAKzC,SACjB0C,WAAcD,KAAK/B,eACnBiC,QAAWF,KAAK5B,aAChB+B,OAAQH,KAAK3B,cAEX2B,KAAKhC,MAAM+B,aAAeC,KAAKhC,MAAMD,MAAMqC,KAAK,SAAAtC,GAAI,OAErD,yBAAK2B,UAAU,YAAYvB,IAAKJ,GAC5B,2BAAOuC,KAAK,WAAWZ,UAAU,kBACjC,uBAAGA,UAAU,YAAYa,QAAS,EAAKhC,iBAAkBR,GACzD,0BAAM2B,UAAU,cAAca,QAAS,EAAKT,iBAG9C,KAGH,4BAAQJ,UAAU,eACd,yBAAKA,UAAU,eACVO,KAAKhC,MAAMD,MAAMqB,OAASY,KAAKhC,MAAMgB,YAD1C,eAGA,yBAAKS,UAAU,iBACV,4BAAQA,UAAU,UAAUa,QAASN,KAAKV,YAAaa,OAAQH,KAAKJ,YAApE,OACA,4BAAQH,UAAU,cAAca,QAASN,KAAKV,YAAaa,OAAQH,KAAKJ,YAAxE,UACA,4BAAQU,QAASN,KAAKV,YAAaa,OAAQH,KAAKJ,YAAhD,cAEL,yBAAKH,UAAU,mBACV,4BAAQa,QAASN,KAAKF,sBAAtB,sBAIb,yBAAKL,UAAU,oBACf,yBAAKA,UAAU,0B,GAzIXc,IAAMC,WAiJzBC,IAASC,OAAO,kBAAC,EAAD,MAAUxB,SAASyB,eAAe,SDnB5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d1dd2495.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass Body extends React.Component{\n    constructor (props) {\n        super (props);\n        this.state = { inputValue: 'What needs to be done?', todos: [], showAllToDos: true, deleteCount: 0}\n    };\n\n   \n    onChange = event => this.setState( {inputValue: event.target.value} );\n\n    getNewToDo = todo => this.setState( { todos: [...this.state.todos, todo] } );\n    displayNewToDo = (event) => {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.getNewToDo(this.state.inputValue);\n            this.setState( {inputValue:''} );\n        } \n    }\n    onInputFocus = () => {\n        this.setState( {inputValue:''} );\n    }\n    onInputBlur = () => {\n        this.setState( {inputValue:'What needs to be done?'} );\n    }\n\n    checkboxOnClick = (event) => {\n\n        event.preventDefault();\n\n\n        if (!event.currentTarget.parentElement.classList.contains('checked')){\n            event.currentTarget.style.color = \"rgb(211, 211, 211)\";\n            event.currentTarget.style.textDecoration = \"line-through\";\n            event.currentTarget.parentElement.classList.add('checked');\n            event.currentTarget.classList.add('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        } \n        else{\n            event.currentTarget.style.color = \"black\";\n            event.currentTarget.style.textDecoration = \"none\";\n            event.currentTarget.parentElement.classList.remove('checked');\n            event.currentTarget.classList.remove('checkedelem');\n            this.setState({checked: this.state.checked-2})\n            this.setState({deleteCount: this.state.deleteCount - 1});\n        }\n\n        if (document.getElementsByClassName('checked').length >= 1) {\n            document.getElementsByClassName('todos-completed')[0].style.visibility=\"visible\";\n        } \n\n        \n    }\n\n    buttonClick = (event) => {\n        event.preventDefault(); \n        event.currentTarget.style.border = '1px solid rgb(233, 189, 189)';\n        event.currentTarget.style.borderRadius = '2px';\n\n        if (event.currentTarget.className === 'showAll') {\n            for (let i=0; i<document.getElementsByClassName('checked').length; i++) {  \n                document.getElementsByClassName('checked')[i].style.display='flex'\n            }\n        }\n        else if (event.currentTarget.className === 'ActiveToDos') {\n            for (let i=0; i<document.getElementsByClassName('checked').length; i++) {  \n                document.getElementsByClassName('checked')[i].style.display='none'\n            }\n          \n        }\n\n    }\n\n    buttonBlur = (event) => {\n        event.preventDefault(); \n        event.currentTarget.style.border = 'none'\n    }\n\n    deleteToDo = (event) => {\n        event.preventDefault(); \n        event.currentTarget.parentElement.remove();\n        if (!event.currentTarget.parentElement.classList.contains('checked')) {\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        }\n        \n       \n    }\n\n    deleteCompletedToDos = (event) => {\n        event.preventDefault(); \n        let i=0;\n        while (document.getElementsByClassName('checked').length > 0) {  \n            document.getElementsByClassName('checked')[i].remove();\n        }\n    }\n    \n\n    render () {\n        return (\n           <Fragment>\n\n               <h1 className=\"main-heading\">todos</h1>\n\n               <form className=\"main-wrap\">\n\n                   <input \n                   className=\"add-todo-field\" \n                   value = {this.state.inputValue} \n                   onChange = {this.onChange} \n                   onKeyPress = {this.displayNewToDo} \n                   onFocus = {this.onInputFocus} \n                   onBlur={this.onInputBlur}></input>\n\n                    {this.state.showAllToDos ? this.state.todos.map( todo => \n\n                    <div className=\"todo-wrap\" key={todo}> \n                        <input type=\"checkbox\" className=\"todo-checkbox\"></input>\n                        <p className=\"todo-text\" onClick={this.checkboxOnClick}>{todo}</p>\n                        <span className=\"delete-todo\" onClick={this.deleteToDo}></span>\n                    </div>) \n\n                    : null}\n                   \n                   \n                   <footer className=\"form-footer\">\n                       <div className=\"todos-count\">\n                           {this.state.todos.length - this.state.deleteCount} items left\n                       </div>\n                       <div className=\"todos-filters\">\n                            <button className=\"showAll\" onClick={this.buttonClick} onBlur={this.buttonBlur}>All</button>\n                            <button className=\"ActiveToDos\" onClick={this.buttonClick} onBlur={this.buttonBlur}>Active</button>\n                            <button onClick={this.buttonClick} onBlur={this.buttonBlur}>Completed</button>\n                       </div>\n                       <div className=\"todos-completed\">\n                            <button onClick={this.deleteCompletedToDos}>Clear Completed</button> \n                       </div>\n                   </footer>\n               </form> \n               <div className=\"decoration-line\"></div>\n               <div className=\"decoration-line2\"></div>\n\n           </Fragment>\n        );\n    }\n}\n\n\nReactDOM.render(<Body />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}