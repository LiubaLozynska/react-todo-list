{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Body","props","onChange","event","setState","inputValue","target","value","getNewToDo","todo","todos","state","displayNewToDo","key","preventDefault","document","getElementsByClassName","style","visibility","onInputFocus","onInputBlur","checkboxOnClick","parent","currentTarget","parentElement","classList","contains","children","color","textDecoration","remove","checked","deleteCount","add","length","buttonClick","border","borderRadius","className","i","display","item","buttonBlur","deleteToDo","deleteCompletedToDos","onDropDownClick","dropdownclicked","count","showAllToDos","onClick","this","onKeyPress","onFocus","onBlur","map","type","React","Component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICbAC,E,YACF,WAAaC,GAAQ,IAAD,8BAChB,4CAAOA,KAKXC,SAAW,SAAAC,GAAK,OAAI,EAAKC,SAAU,CAACC,WAAYF,EAAMG,OAAOC,SANzC,EASpBC,WAAa,SAAAC,GAAI,OAAI,EAAKL,SAAU,CAAEM,MAAM,GAAD,mBAAM,EAAKC,MAAMD,OAAjB,CAAwBD,OAT/C,EAYpBG,eAAiB,SAAAT,GACK,UAAdA,EAAMU,MACNV,EAAMW,iBACN,EAAKN,WAAW,EAAKG,MAAMN,YAC3B,EAAKD,SAAU,CAACC,WAAW,KAC3BU,SAASC,uBAAuB,YAAY,GAAGC,MAAMC,WAAW,YAjBpD,EAsBpBC,aAAe,WACX,EAAKf,SAAU,CAACC,WAAW,MAvBX,EA0BpBe,YAAc,WACV,EAAKhB,SAAU,CAACC,WAAW,4BA3BX,EA+BpBgB,gBAAkB,SAAAlB,GAEdA,EAAMW,iBAEN,IAAIQ,EAAOnB,EAAMoB,cAAcC,cAE1BF,EAAOG,UAAUC,SAAS,YAQ3BJ,EAAOK,SAAS,GAAGV,MAAMW,MAAQ,QACjCN,EAAOK,SAAS,GAAGV,MAAMY,eAAiB,OAC1CP,EAAOG,UAAUK,OAAO,WACxBR,EAAOK,SAAS,GAAGF,UAAUK,OAAO,eACpC,EAAK1B,SAAS,CAAC2B,QAAS,EAAKpB,MAAMoB,QAAQ,IAC3C,EAAK3B,SAAS,CAAC4B,YAAa,EAAKrB,MAAMqB,YAAc,MAZrDV,EAAOK,SAAS,GAAGV,MAAMW,MAAQ,qBACjCN,EAAOK,SAAS,GAAGV,MAAMY,eAAiB,eAC1CP,EAAOG,UAAUQ,IAAI,WACrBX,EAAOK,SAAS,GAAGF,UAAUQ,IAAI,eACjC,EAAK7B,SAAS,CAAC4B,YAAa,EAAKrB,MAAMqB,YAAc,KAWxDjB,SAASC,uBAAuB,WAAWkB,QAAU,EACtDnB,SAASC,uBAAuB,mBAAmB,GAAGC,MAAMC,WAAW,UACvEH,SAASC,uBAAuB,mBAAmB,GAAGC,MAAMC,WAAW,UAvDvD,EA4DpBiB,YAAc,SAAAhC,GAOV,GALAA,EAAMW,iBAENX,EAAMoB,cAAcN,MAAMmB,OAAS,+BACnCjC,EAAMoB,cAAcN,MAAMoB,aAAe,MAEH,YAAlClC,EAAMoB,cAAce,UACpB,IAAK,IAAIC,EAAE,EAAGA,EAAExB,SAASC,uBAAuB,aAAakB,OAAQK,IACjExB,SAASC,uBAAuB,aAAauB,GAAGtB,MAAMuB,QAAQ,YAGjE,GAAsC,gBAAlCrC,EAAMoB,cAAce,UAA6B,CAAC,IAAD,uBACtD,YAAiBvB,SAASC,uBAAuB,aAAjD,+CAA+D,CAAC,IAAvDyB,EAAsD,QACtDA,EAAKhB,UAAUC,SAAS,WACzBe,EAAKxB,MAAMuB,QAAQ,OAGnBC,EAAKxB,MAAMuB,QAAQ,QAN2B,wFAUrD,GAAsC,mBAAlCrC,EAAMoB,cAAce,UAAgC,CAAC,IAAD,uBACzD,YAAiBvB,SAASC,uBAAuB,aAAjD,+CAA+D,CAAC,IAAvDyB,EAAsD,QACtDA,EAAKhB,UAAUC,SAAS,WAIzBe,EAAKxB,MAAMuB,QAAQ,OAHnBC,EAAKxB,MAAMuB,QAAQ,QAH8B,qFAlF7C,EA+FpBE,WAAa,SAAAvC,GACTA,EAAMW,iBACNX,EAAMoB,cAAcN,MAAMmB,OAAS,QAjGnB,EAqGpBO,WAAa,SAAAxC,GACTA,EAAMW,iBACNX,EAAMoB,cAAcC,cAAcM,SAC7B3B,EAAMoB,cAAcC,cAAcC,UAAUC,SAAS,YACtD,EAAKtB,SAAS,CAAC4B,YAAa,EAAKrB,MAAMqB,YAAc,KAzGzC,EA8GpBY,qBAAuB,SAAAzC,GACnBA,EAAMW,iBAEN,KAAOC,SAASC,uBAAuB,WAAWkB,OAAS,GACvDnB,SAASC,uBAAuB,WAF9B,GAE4Cc,UAlHlC,EAuHpBe,gBAAkB,SAAA1C,GAId,GAFAA,EAAMW,iBAE6B,IAA/B,EAAKH,MAAMmC,gBAAuB,CAClC,IAAIC,EAAM,EADwB,uBAElC,YAAiBhC,SAASC,uBAAuB,aAAjD,+CAA+D,CAAC,IAAvDyB,EAAsD,QACtDA,EAAKhB,UAAUC,SAAS,aACzBqB,IACAN,EAAKhB,UAAUQ,IAAI,WACnBQ,EAAKd,SAAS,GAAGV,MAAMW,MAAQ,qBAC/Ba,EAAKd,SAAS,GAAGV,MAAMY,eAAiB,eACxCY,EAAKd,SAAS,GAAGF,UAAUQ,IAAI,eAC/B,EAAK7B,SAAU,CAAC0C,gBAAiB,MATP,kFAYlC,EAAK1C,SAAS,CAAC4B,YAAa,EAAKrB,MAAMqB,YAAce,QAEpD,CACA,IAAIA,EAAMhC,SAASC,uBAAuB,WAAYkB,OADtD,uBAEA,YAAiBnB,SAASC,uBAAuB,aAAjD,+CAA+D,CAAC,IAAvDyB,EAAsD,QAC5DA,EAAKd,SAAS,GAAGV,MAAMW,MAAM,QAC7Ba,EAAKd,SAAS,GAAGV,MAAMY,eAAiB,OACxCY,EAAKd,SAAS,GAAGF,UAAUK,OAAO,eAClCW,EAAKhB,UAAUK,OAAO,YANzB,kFAQA,EAAK1B,SAAU,CAAC0C,gBAAiB,IACjC,EAAK1C,SAAS,CAAC4B,YAAa,EAAKrB,MAAMqB,YAAce,MAhJ1D,EAAKpC,MAAQ,CAAEN,WAAY,yBAA0BK,MAAO,GAAIsC,cAAc,EAAMhB,YAAa,EAAGc,gBAAiB,GAFrG,E,sEAwJT,IAAD,OACN,OACG,kBAAC,WAAD,KAEI,wBAAIR,UAAU,gBAAd,SAEA,0BAAMA,UAAU,aACZ,0BAAMA,UAAU,WAAWW,QAASC,KAAKL,kBACzC,2BACAP,UAAU,iBACV/B,MAAS2C,KAAKvC,MAAMN,WACpBH,SAAYgD,KAAKhD,SACjBiD,WAAcD,KAAKtC,eACnBwC,QAAWF,KAAK/B,aAChBkC,OAAQH,KAAK9B,cAEb,wBAAIkB,UAAU,aACZY,KAAKvC,MAAMqC,aAAeE,KAAKvC,MAAMD,MAAM4C,KAAK,SAAA7C,GAAI,OACrD,wBAAI6B,UAAU,YAAYzB,IAAKJ,GAC3B,2BAAO8C,KAAK,WAAWjB,UAAU,gBAAgBW,QAAS,EAAK5B,kBAC/D,uBAAGiB,UAAU,aAAa7B,GAC1B,0BAAM6B,UAAU,cAAcW,QAAS,EAAKN,iBAG9C,MAGH,4BAAQL,UAAU,eACd,yBAAKA,UAAU,eACVY,KAAKvC,MAAMD,MAAMwB,OAASgB,KAAKvC,MAAMqB,YAD1C,eAGA,yBAAKM,UAAU,iBACV,4BAAQA,UAAU,UAAUW,QAASC,KAAKf,YAAakB,OAAQH,KAAKR,YAApE,OACA,4BAAQJ,UAAU,cAAcW,QAASC,KAAKf,YAAakB,OAAQH,KAAKR,YAAxE,UACA,4BAAQJ,UAAU,iBAAiBW,QAASC,KAAKf,YAAakB,OAAQH,KAAKR,YAA3E,cAEL,yBAAKJ,UAAU,mBACV,4BAAQW,QAASC,KAAKN,sBAAtB,sBAIb,yBAAKN,UAAU,oBACf,yBAAKA,UAAU,0B,GAnMXkB,IAAMC,WA2MzBC,IAASC,OAAO,kBAAC,EAAD,MAAU5C,SAAS6C,eAAe,SD7E5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8c3a1071.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass Body extends React.Component{\n    constructor (props) {\n        super (props);\n        this.state = { inputValue: 'What needs to be done?', todos: [], showAllToDos: true, deleteCount: 0, dropdownclicked: 0}\n    };\n\n   \n    onChange = event => this.setState( {inputValue: event.target.value} ); // making this input field available for accepting new input\n\n\n    getNewToDo = todo => this.setState( { todos: [...this.state.todos, todo] } ); // adding new todos to our todos array\n\n\n    displayNewToDo = event => {\n        if (event.key === \"Enter\") {\n            event.preventDefault();\n            this.getNewToDo(this.state.inputValue);\n            this.setState( {inputValue:''} );\n            document.getElementsByClassName('dropdown')[0].style.visibility=\"visible\"\n        } \n    } // displaying new todos in the list\n\n\n    onInputFocus = () => {\n        this.setState( {inputValue:''} );\n    } // input decoration\n\n    onInputBlur = () => {\n        this.setState( {inputValue:'What needs to be done?'} );\n    } // input decoration\n\n\n    checkboxOnClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        let parent=event.currentTarget.parentElement;\n\n        if (!parent.classList.contains('checked')){\n            parent.children[1].style.color = \"rgb(211, 211, 211)\";\n            parent.children[1].style.textDecoration = \"line-through\";\n            parent.classList.add('checked');\n            parent.children[1].classList.add('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        } // we set a special style for those items which has been checked as done\n        else{\n            parent.children[1].style.color = \"black\";\n            parent.children[1].style.textDecoration = \"none\";\n            parent.classList.remove('checked');\n            parent.children[1].classList.remove('checkedelem');\n            this.setState({checked: this.state.checked-2})\n            this.setState({deleteCount: this.state.deleteCount - 1});\n        } // setting default styles if the item was double clicked, which means it was labled as active again\n        \n        (document.getElementsByClassName('checked').length >= 1) ? \n        document.getElementsByClassName('todos-completed')[0].style.visibility=\"visible\" : \n        document.getElementsByClassName('todos-completed')[0].style.visibility=\"hidden\" \n        // diplaying a 'Clear Completed' button, once at least one item was checked as completed\n    }\n\n\n    buttonClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        event.currentTarget.style.border = '1px solid rgb(233, 189, 189)';\n        event.currentTarget.style.borderRadius = '2px';  // special styles for the active button\n\n        if (event.currentTarget.className === 'showAll') {\n            for (let i=0; i<document.getElementsByClassName('todo-wrap').length; i++) {  \n                document.getElementsByClassName('todo-wrap')[i].style.display='flex'\n            }\n        } // displaying all todos once \"All\" button was pressed\n        else if (event.currentTarget.className === 'ActiveToDos') {\n            for (let item of document.getElementsByClassName('todo-wrap')) {  \n                if ( item.classList.contains('checked')) {\n                    item.style.display=\"none\";\n                }\n                else {\n                    item.style.display=\"flex\";\n                }\n            }\n        } // displaying active todos once \"Active\" button was pressed\n        else if (event.currentTarget.className === 'CompletedToDos') {\n            for (let item of document.getElementsByClassName('todo-wrap')) {    \n                if (!item.classList.contains('checked')) {\n                    item.style.display=\"none\";\n                }\n                else {\n                    item.style.display=\"flex\";\n                }\n            }\n        } // displaying completed todos once \"Completed\" button was pressed\n  } \n\n\n    buttonBlur = event => {\n        event.preventDefault(); \n        event.currentTarget.style.border = 'none'\n    }\n\n\n    deleteToDo = event => {\n        event.preventDefault(); \n        event.currentTarget.parentElement.remove();\n        if (!event.currentTarget.parentElement.classList.contains('checked')) {\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        } \n    } // removing a todo from the list once the 'delete' sign was pressed\n\n\n    deleteCompletedToDos = event => {\n        event.preventDefault(); \n        let i=0;\n        while (document.getElementsByClassName('checked').length > 0) {  \n            document.getElementsByClassName('checked')[i].remove();\n        }\n    } // removing todos from the list once the 'Clear Completed' button was pressed\n\n\n    onDropDownClick = event => {\n\n        event.preventDefault(); \n        \n        if (this.state.dropdownclicked === 0) {\n            let count=0;\n            for (let item of document.getElementsByClassName('todo-wrap')) {    \n                if (!item.classList.contains('checked')) {\n                    count++;\n                    item.classList.add('checked')\n                    item.children[1].style.color = \"rgb(211, 211, 211)\";\n                    item.children[1].style.textDecoration = \"line-through\";\n                    item.children[1].classList.add('checkedelem');\n                    this.setState( {dropdownclicked: 1} );\n                }\n            }\n            this.setState({deleteCount: this.state.deleteCount + count});\n        } // once a dropdown sign is clicked we mark all todos as done\n        else {\n             let count=document.getElementsByClassName('checked') .length;\n             for (let item of document.getElementsByClassName('todo-wrap')) {\n                item.children[1].style.color='black';\n                item.children[1].style.textDecoration = \"none\";\n                item.children[1].classList.remove('checkedelem');\n                item.classList.remove('checked');\n             }\n             this.setState( {dropdownclicked: 0} );\n             this.setState({deleteCount: this.state.deleteCount - count});\n        } //once a dropdown sign is unpressed, we mark all todos as active\n    }\n    \n\n\n    render () {\n        return (\n           <Fragment>\n\n               <h1 className=\"main-heading\">todos</h1>\n\n               <form className=\"main-wrap\">\n                   <span className=\"dropdown\" onClick={this.onDropDownClick}></span>\n                   <input \n                   className=\"add-todo-field\" \n                   value = {this.state.inputValue} \n                   onChange = {this.onChange} \n                   onKeyPress = {this.displayNewToDo} \n                   onFocus = {this.onInputFocus} \n                   onBlur={this.onInputBlur}></input>\n                   \n                   <ul className=\"todo-list\">\n                    {this.state.showAllToDos ? this.state.todos.map( todo => \n                    <li className=\"todo-wrap\" key={todo}> \n                        <input type=\"checkbox\" className=\"todo-checkbox\" onClick={this.checkboxOnClick}></input>\n                        <p className=\"todo-text\">{todo}</p>\n                        <span className=\"delete-todo\" onClick={this.deleteToDo}></span>\n                    </li>) \n\n                    : null}\n                    </ul>\n                   \n                   <footer className=\"form-footer\">\n                       <div className=\"todos-count\">\n                           {this.state.todos.length - this.state.deleteCount} items left\n                       </div>\n                       <div className=\"todos-filters\">\n                            <button className=\"showAll\" onClick={this.buttonClick} onBlur={this.buttonBlur}>All</button>\n                            <button className=\"ActiveToDos\" onClick={this.buttonClick} onBlur={this.buttonBlur}>Active</button>\n                            <button className=\"CompletedToDos\" onClick={this.buttonClick} onBlur={this.buttonBlur}>Completed</button>\n                       </div>\n                       <div className=\"todos-completed\">\n                            <button onClick={this.deleteCompletedToDos}>Clear Completed</button> \n                       </div>\n                   </footer>\n               </form> \n               <div className=\"decoration-line\"></div>\n               <div className=\"decoration-line2\"></div>\n\n           </Fragment>\n        );\n    }\n}\n\n\nReactDOM.render(<Body />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}