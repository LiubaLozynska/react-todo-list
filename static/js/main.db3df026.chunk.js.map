{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Footer","className","React","Component","Body","props","onChangeAddToDo","event","setState","inputValue","target","value","getNewToDo","todo","todos","state","displayNewToDo","key","preventDefault","document","getElementsByClassName","style","visibility","onInputFocus","onInputBlur","checkboxOnClick","parent","currentTarget","parentElement","classList","contains","remove","children","deleteCount","add","toDosCompleted","length","buttonClick","border","borderRadius","todoWraps","display","item","buttonBlur","deleteToDo","deleteCompletedToDos","allCheckedToDos","onDropDownClick","dropdown","toDoWraps","countOfChecked","countOfNotCheked","onToDoClick","input","innerHTML","toDoBlur","showAllToDos","dropdownclicked","todovalue","count","onClick","this","onChange","onKeyPress","onFocus","onBlur","map","index","type","itemID","defaultValue","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db3df026.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass Footer extends React.Component {\n    render () {\n        return (\n            <Fragment>\n                <div className=\"main-footer\">\n                <div className=\"main-footer__item\">Double-click to edit a todo</div>\n                <div className=\"main-footer__item\">Created by <span className=\"author\">Liuba Lozynska</span></div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nclass Body extends React.Component{\n    constructor (props) {\n        super (props);\n        this.state = { inputValue: 'What needs to be done?', todos: [], showAllToDos: true, deleteCount: 0, dropdownclicked: 0, todovalue:'', count:0}\n    };\n        \n    onChangeAddToDo = event => this.setState( {inputValue: event.target.value} ); // making this input field available for accepting new input\n\n\n    getNewToDo = todo => {this.setState( { todos: [...this.state.todos, todo] } ); } // adding new todos to our todos array\n\n\n    displayNewToDo = event => {\n\n        if (event.key === \"Enter\") { // if Enter was pressed\n\n            event.preventDefault();\n\n            this.getNewToDo(this.state.inputValue);   // adding new todo to our todos array\n            this.setState( {inputValue:''} ); // seting input value to empty string so that user could type new ToDo\n\n            document.getElementsByClassName('dropdown')[0].style.visibility=\"visible\" \n            // displaying a dropdown once at least one todo was added to the list\n        } \n    } // displaying new todos in the list\n\n\n    onInputFocus = () => {\n        this.setState( {inputValue:''} );\n    } // input decoration\n\n    onInputBlur = () => {\n        this.setState( {inputValue:'What needs to be done?'} );\n    } // input decoration\n\n\n    checkboxOnClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        let parent=event.currentTarget.parentElement;\n\n        if (!parent.classList.contains('checked')){\n            parent.classList.add('checked');\n            parent.children[1].classList.add('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        } // we set a special style for those items which has been checked as done\n\n        else{\n            parent.classList.remove('checked');\n            parent.children[1].classList.remove('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount - 1});\n        } // setting default styles if the item was double clicked, which means it was labled as active again\n        \n        let toDosCompleted = document.getElementsByClassName('todos-completed');\n        document.getElementsByClassName('checked').length >= 1 ?  \n        toDosCompleted[0].style.visibility=\"visible\" : toDosCompleted[0].style.visibility=\"hidden\";\n        // diplaying a 'Clear Completed' button, once at least one item was checked as completed\n    }\n\n\n    buttonClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        event.currentTarget.style.border = '1px solid rgb(233, 189, 189)';\n        event.currentTarget.style.borderRadius = '2px'; \n        // special styles for the active button\n\n        let todoWraps = document.getElementsByClassName('todo-wrap');\n\n        if (event.currentTarget.className === 'showAll') {\n            for (let item  of todoWraps) {  \n                item.style.display='flex'\n            }\n        } // displaying all todos once \"All\" button was pressed\n\n        else if (event.currentTarget.className === 'ActiveToDos') {\n            for (let item of todoWraps) {  \n                 (item.classList.contains('checked')) ? item.style.display=\"none\" : item.style.display=\"flex\";\n            }\n        } // displaying active todos once \"Active\" button was pressed\n\n        else if (event.currentTarget.className === 'CompletedToDos') {\n            for (let item of document.getElementsByClassName('todo-wrap')) {    \n                (!item.classList.contains('checked')) ? item.style.display=\"none\" : item.style.display=\"flex\";       \n            }\n        } // displaying completed todos once \"Completed\" button was pressed\n\n  } // end of buttonClick\n\n\n    buttonBlur = event => {\n        event.preventDefault(); \n        event.currentTarget.style.border = 'none'\n    }\n\n\n    deleteToDo = event => {\n\n        event.preventDefault(); \n\n        let parent=event.currentTarget.parentElement;\n        parent.remove(); // removing a todo from the list once the 'delete' sign was pressed\n\n        if (!parent.classList.contains('checked')) {\n            this.setState({deleteCount: this.state.deleteCount + 1}); \n        } // counting removed todos for an up to date 'items left' field\n    } \n\n\n    deleteCompletedToDos = event => {\n\n        event.preventDefault(); \n\n        let i=0;\n        let allCheckedToDos= document.getElementsByClassName('checked');\n\n        while (allCheckedToDos.length > 0) {  \n            allCheckedToDos[i].remove();\n        } // removing todos from the list once the 'Clear Completed' button was pressed\n\n        document.getElementsByClassName('todos-completed')[0].style.visibility=\"hidden\";\n         // hiding \"Clear Completed\" button once all completed ToDos have been deleted\n        document.getElementsByClassName('dropdown')[0].style.visibility=\"hidden\"; \n         // hiding \"dropdown\" once all completed ToDos have been deleted\n    } \n\n\n    onDropDownClick = event => { \n\n        event.preventDefault(); \n\n        let dropdown = document.getElementsByClassName('dropdown')[0];\n        let toDoWraps = document.getElementsByClassName('todo-wrap');\n        \n        if ( ! dropdown.classList.contains('clicked')) { // once a dropdown sign is clicked we mark all todos as done\n\n            let countOfNotCheked = 0;\n\n            for (let item of toDoWraps) {  \n                if ( ! item.classList.contains('checked')) {\n                    countOfNotCheked++;\n                    item.classList.add('checked')\n                    item.children[1].classList.add('checkedelem');  \n                }\n            }\n\n            dropdown.classList.add('clicked');\n            this.setState({deleteCount: this.state.deleteCount + countOfNotCheked}); \n            // adding the number of newly chekced items to deleteCount in order to display correct 'items left'\n        } \n\n        else {\n             let countOfChecked = document.getElementsByClassName('checked').length;\n             for (let item of toDoWraps) {\n                item.children[1].classList.remove('checkedelem');\n                item.classList.remove('checked');\n             }\n             dropdown.classList.remove('clicked');\n             this.setState({deleteCount: this.state.deleteCount - countOfChecked});\n        } //once a dropdown sign is unpressed, we mark all todos as active\n\n    } // end of onDropDownClick\n    \n    \n    onToDoClick = (event) => {\n         \n        let parent = event.target.parentElement;\n        let input = parent.children[1];\n        let text = parent.children[0].innerHTML;\n\n        input.style.visibility = \"visible\"; //make input visible and available for todo change\n\n    } // makes the todo available for being changed on doubleclick\n    \n    toDoBlur = (event) => {\n\n        let parent = event.target.parentElement;\n        let input = parent.children[1];\n\n        parent.children[0].innerHTML = input.value; //we add the updated text to the todo field\n        input.style.visibility = \"hidden\"; // hiding input and making the field unavailable for uodating and change\n\n    } // makes the todo not available for being changed\n    \n\n    render () {\n        return (\n           <Fragment>\n\n               <h1 className=\"main-heading\">todos</h1>\n\n               <form className=\"main-wrap\">\n                   <span className=\"dropdown\" onClick={this.onDropDownClick}></span>\n                   <input \n                   className=\"add-todo-field\" \n                   value = {this.state.inputValue} \n                   onChange = {this.onChangeAddToDo} \n                   onKeyPress = {this.displayNewToDo} \n                   onFocus = {this.onInputFocus} \n                   onBlur={this.onInputBlur}></input>\n                   \n                   <ul className=\"todo-list\">\n                    { \n                    this.state.showAllToDos ? this.state.todos.map( (todo, index) => \n                    <li className=\"todo-wrap\" key={todo}> \n                        <input type=\"checkbox\" className=\"todo-checkbox\" onClick={this.checkboxOnClick}></input>\n                        <p className=\"todo-text\"><span className=\"todo-style\" onClick={this.onToDoClick}>{todo}</span><input className=\"todo\" itemID={index} type=\"text\" defaultValue={this.state.todos[index]} onBlur={this.toDoBlur}></input></p> \n                        <span className=\"delete-todo\" onClick={this.deleteToDo}></span>\n                        </li>) \n\n                    : null}\n                    </ul>\n                   \n                   <footer className=\"form-footer\">\n                       <div className=\"todos-count\">\n                           {this.state.todos.length - this.state.deleteCount} items left\n                       </div>\n                       <div className=\"todos-filters\">\n                            <button className=\"showAll\" onClick={this.buttonClick} onBlur={this.buttonBlur}>All</button>\n                            <button className=\"ActiveToDos\" onClick={this.buttonClick} onBlur={this.buttonBlur}>Active</button>\n                            <button className=\"CompletedToDos\" onClick={this.buttonClick} onBlur={this.buttonBlur}>Completed</button>\n                       </div>\n                       <div className=\"todos-completed\">\n                            <button onClick={this.deleteCompletedToDos}>Clear Completed</button> \n                       </div>\n                   </footer>\n               </form> \n               <div className=\"decoration-line\"></div>\n               <div className=\"decoration-line2\"></div>\n               <Footer />\n\n           </Fragment>\n        );\n    }\n}\n\n\nReactDOM.render(<Body />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}