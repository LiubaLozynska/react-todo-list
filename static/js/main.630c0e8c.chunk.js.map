{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Footer","className","React","Component","Body","props","removeLocalStorageItem","target","item","localStorage","console","log","getItem","removeItem","onChangeAddToDo","event","setState","inputValue","value","getNewToDo","todo","todos","state","displayNewToDo","key","preventDefault","index","toDoIndex","setItem","document","getElementsByClassName","style","visibility","onInputFocus","onInputBlur","checkboxOnClick","parent","currentTarget","parentElement","classList","contains","remove","children","deleteCount","add","toDosCompleted","length","buttonClick","buttonsParent","todoWraps","display","deleteToDo","getAttribute","deleteCompletedToDos","allCheckedToDos","onDropDownClick","dropdown","toDoWraps","countOfChecked","countOfNotCheked","onToDoClick","input","innerHTML","toDoBlur","this","itemsIgnore","indexOf","push","onClick","onChange","onKeyPress","onFocus","onBlur","map","itemID","type","defaultValue","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.630c0e8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nclass Footer extends React.Component {\n    render () {\n        return (\n            <Fragment>\n                <div className=\"main-footer\">\n                <div className=\"main-footer__item\">Double-click to edit a todo</div>\n                <div className=\"main-footer__item\">Created by <span className=\"author\">Liuba Lozynska</span></div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nclass Body extends React.Component{\n\n    constructor (props) {\n        super (props);\n        this.state = { inputValue: 'What needs to be done?', todos: [], deleteCount: 0, toDoIndex: 0}\n    };\n\n    removeLocalStorageItem = target => {\n\n      for (let item in localStorage) {\n          console.log('checking', item)\n          if (localStorage.getItem(item) === target) {\n            console.log('deleting', item, target)\n            localStorage.removeItem(item);\n            break;\n          }\n      }\n\n    }  \n        \n    onChangeAddToDo = event => this.setState( {inputValue: event.target.value} ); // making this input field available for accepting new input\n\n\n    getNewToDo = todo => {this.setState( { todos: [...this.state.todos, todo] } ); } // adding new todos to our todos array\n\n\n    displayNewToDo = event => {\n\n        if (event.key === \"Enter\") { // if Enter was pressed\n\n            event.preventDefault();\n\n            this.getNewToDo(this.state.inputValue);   // adding new todo to our todos array\n            \n            let index = this.state.toDoIndex;\n            localStorage.setItem(index, this.state.inputValue);\n            \n            this.setState( {toDoIndex: this.state.toDoIndex + 1})\n\n            this.setState( {inputValue:''} ); // seting input value to empty string so that user could type new ToDo\n\n            document.getElementsByClassName('dropdown')[0].style.visibility=\"visible\" \n            // displaying a dropdown once at least one todo was added to the list\n        } \n    } // displaying new todos in the list\n    \n\n    componentDidMount() {\n\n        this.setState( {toDoIndex: 0});\n        \n        let itemsIgnore=['length', 'key', 'getItem', 'setItem', 'removeItem', 'clear'];\n\n        for (let item in localStorage) {\n            if (itemsIgnore.indexOf(item)<0) {\n                this.state.todos.push(localStorage.getItem(item));\n            }\n        }\n\n        if (this.state.todos.length > 0) {\n            document.getElementsByClassName('dropdown')[0].style.visibility=\"visible\"; \n        } // showing a dropdown if at least one ToDo is on the list\n      }\n\n    onInputFocus = () => {\n        this.setState( {inputValue:''} );\n    } // input decoration\n\n    onInputBlur = () => {\n        this.setState( {inputValue:'What needs to be done?'} );\n    } // input decoration\n\n\n    checkboxOnClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        let parent=event.currentTarget.parentElement;\n\n        if (!parent.classList.contains('checked')){\n            parent.classList.add('checked');\n            parent.children[1].classList.add('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount + 1});\n        } // we set a special style for those items which has been checked as done\n\n        else{\n            parent.classList.remove('checked');\n            parent.children[1].classList.remove('checkedelem');\n            this.setState({deleteCount: this.state.deleteCount - 1});\n        } // setting default styles if the item was double clicked, which means it was labled as active again\n        \n        let toDosCompleted = document.getElementsByClassName('todos-completed');\n        document.getElementsByClassName('checked').length >= 1 ?  \n        toDosCompleted[0].style.visibility=\"visible\" : toDosCompleted[0].style.visibility=\"hidden\";\n        // diplaying a 'Clear Completed' button, once at least one item was checked as completed\n    }\n\n\n    buttonClick = event => {\n\n        event.preventDefault(); // preventing the page from reloading\n\n        let activeButton = document.getElementsByClassName('showAll')[0];\n        activeButton.classList.remove('active');\n\n        let buttonsParent = event.currentTarget.parentElement;\n        for (let button of buttonsParent.children) {\n            button.classList.remove('active'); \n        }\n\n        event.currentTarget.classList.add('active')\n        // special styles for the active button\n\n        let todoWraps = document.getElementsByClassName('todo-wrap');\n\n        if (event.currentTarget.classList.contains('showAll')) {\n            for (let item  of todoWraps) {  \n                item.style.display='flex'\n            }\n        } // displaying all todos once \"All\" button was pressed\n\n        else if (event.currentTarget.classList.contains('ActiveToDos')) {\n            for (let item of todoWraps) {  \n                 (item.classList.contains('checked')) ? item.style.display=\"none\" : item.style.display=\"flex\";\n            }\n        } // displaying active todos once \"Active\" button was pressed\n\n        else if (event.currentTarget.classList.contains('CompletedToDos')) {\n            for (let item of document.getElementsByClassName('todo-wrap')) {    \n                (!item.classList.contains('checked')) ? item.style.display=\"none\" : item.style.display=\"flex\";       \n            }\n        } // displaying completed todos once \"Completed\" button was pressed\n\n  } // end of buttonClick\n\n\n\n    deleteToDo = event => {\n\n        event.preventDefault(); \n\n        let parent=event.currentTarget.parentElement;\n        let index = parent.getAttribute('itemID');\n\n        parent.remove(); // removing a todo from the list once the 'delete' sign was pressed\n        console.log(index);\n        this.removeLocalStorageItem(index);  // removing a todo from the local storage\n\n        if (!parent.classList.contains('checked')) {\n            this.setState({deleteCount: this.state.deleteCount + 1}); \n        } // counting removed todos for an up to date 'items left' field\n    } \n\n\n    deleteCompletedToDos = event => {\n\n        event.preventDefault(); \n\n        let i=0;\n        let allCheckedToDos = document.getElementsByClassName('checked');\n\n        while (allCheckedToDos.length > 0) { \n            let index = allCheckedToDos[i].getAttribute('itemID'); \n            allCheckedToDos[i].remove();\n\n            this.removeLocalStorageItem(index);\n            // removing a todo from the local storage\n\n        } // removing todos from the list once the 'Clear Completed' button was pressed\n\n        document.getElementsByClassName('todos-completed')[0].style.visibility=\"hidden\";\n         // hiding \"Clear Completed\" button once all completed ToDos have been deleted\n\n        if ( ! (this.state.todos.length - this.state.deleteCount) ) {\n            document.getElementsByClassName('dropdown')[0].style.visibility=\"hidden\"; \n        }\n        // hiding \"dropdown\" once all ToDos have been deleted\n    } \n\n\n    onDropDownClick = event => { \n\n        event.preventDefault(); \n\n        let dropdown = document.getElementsByClassName('dropdown')[0];\n        let toDoWraps = document.getElementsByClassName('todo-wrap');\n\n        \n        \n        if ( ! dropdown.classList.contains('clicked')) { // once a dropdown sign is clicked we mark all todos as done\n\n            let countOfNotCheked = 0;\n\n            for (let item of toDoWraps) {  \n                if ( ! item.classList.contains('checked')) {\n                    countOfNotCheked++;\n                    item.classList.add('checked')\n                    item.children[1].classList.add('checkedelem');  \n                }\n            }\n\n            dropdown.classList.add('clicked');\n            this.setState({deleteCount: this.state.deleteCount + countOfNotCheked}); \n            // adding the number of newly chekced items to deleteCount in order to display correct 'items left'\n\n            document.getElementsByClassName('todos-completed')[0].style.visibility=\"visible\"; // making \"Clear Completed button\" visible\n        } \n\n        else {\n             let countOfChecked = document.getElementsByClassName('checked').length;\n             for (let item of toDoWraps) {\n                item.children[1].classList.remove('checkedelem');\n                item.classList.remove('checked');\n             }\n             dropdown.classList.remove('clicked');\n             this.setState({deleteCount: this.state.deleteCount - countOfChecked});\n\n             document.getElementsByClassName('todos-completed')[0].style.visibility=\"hidden\";  // making \"Clear Completed button\" hidden\n\n        } //once a dropdown sign is unpressed, we mark all todos as active\n\n    } // end of onDropDownClick\n    \n    \n    onToDoClick = (event) => {\n         \n        let parent = event.target.parentElement;\n        let input = parent.children[1];\n        let text = parent.children[0].innerHTML;\n\n        input.style.visibility = \"visible\"; //make input visible and available for todo change\n\n    } // makes the todo available for being changed on doubleclick\n    \n    toDoBlur = (event) => {\n\n        let parent = event.target.parentElement;\n        let input = parent.children[1];\n\n        parent.children[0].innerHTML = input.value; //we add the updated text to the todo field\n        input.style.visibility = \"hidden\"; // hiding input and making the field unavailable for uodating and change\n\n    } // makes the todo not available for being changed\n    \n\n\n\n\n\n\n    render () {\n        return (\n           <Fragment>\n\n               <h1 className=\"main-heading\">todos</h1>\n\n               <form className=\"main-wrap\">\n                   <span className=\"dropdown\" onClick={this.onDropDownClick}></span>\n                   <input \n                   className=\"add-todo-field\" \n                   value = {this.state.inputValue} \n                   onChange = {this.onChangeAddToDo} \n                   onKeyPress = {this.displayNewToDo} \n                   onFocus = {this.onInputFocus} \n                   onBlur={this.onInputBlur}></input>\n                   \n                   <ul className=\"todo-list\">\n                    { \n                    this.state.todos.map( (todo, index) => \n                    <li className=\"todo-wrap\" key={index} itemID={todo}> \n                        <input type=\"checkbox\" className=\"todo-checkbox\" onClick={this.checkboxOnClick}></input>\n                            <p className=\"todo-text\">\n                                <span className=\"todo-style\" onClick={this.onToDoClick}>{todo}</span>\n                                <input className=\"todo\" itemID={index} type=\"text\" defaultValue={this.state.todos[index]} onBlur={this.toDoBlur}></input>\n                            </p> \n                        <span className=\"delete-todo\" onClick={this.deleteToDo}></span>\n                        </li>) \n\n                    }\n                    </ul>\n                   \n                   <footer className=\"form-footer\">\n                       <div className=\"todos-count\">\n                           {this.state.todos.length - this.state.deleteCount} items left\n                       </div>\n                       <div className=\"todos-filters\">\n                            <button className=\"showAll active\" onClick={this.buttonClick}>All</button>\n                            <button className=\"ActiveToDos\" onClick={this.buttonClick}>Active</button>\n                            <button className=\"CompletedToDos\" onClick={this.buttonClick}>Completed</button>\n                       </div>\n                       <div className=\"todos-completed\">\n                            <button onClick={this.deleteCompletedToDos}>Clear Completed</button> \n                       </div>\n                   </footer>\n               </form> \n               <div className=\"decoration-line\"></div>\n               <div className=\"decoration-line2\"></div>\n               <Footer />\n\n           </Fragment>\n        );\n    }\n}\n\n\nReactDOM.render(<Body />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}